#JSGF V1.0;

/**
 * JSGF Grammar for Speech Calculator
 */

grammar calculator;

public <everything>=<simpleNumberOp>|<storingLastResult>|<retrieving>|<circleArea>|<definition>|<assignValue>|<log>|<numbersPowered>|<variableHandling>|<triplets>|<constantsPowered>;
<triplets>=(<beginners>)(<operation>)(<beginners>)(<operation>)(<beginners>);
<simpleNumberOp>=<number><operation><number>;
<variableHandling>=<variablesPowered>|(<variables>)(<operation>)(<variables>)|(<variables>)(<operation>)(<number>)|(<number>)(<operation>)(<variables>)|(log)((<variables>)|(<variables>)(<all>)(<powerName>)|(<variablesPowered>)|(<variablesPowered>)(<all>)(<powerName>))(to)(the)(base)((<digit2>)|(10));
<storingLastResult>=(store)(last)(result);
<retrieving>=(retrieve)(last)(result);
<number> = <number1> | <number2>;
<circleArea>= (<pi>)(<variables>)(squared);
<definition>=(define)(variable)(<variables>);
<assignValue>=(store)(<variables>)(<number>); 
<operation> = plus | minus | times | over;
<log>= (log)((<number>)|(<number>)(<all>)(<powerName>)  |(<numbersPowered>)|(<numbersPowered>)(<all>)(<powerName>)|(<Expon>)|(<Expon>)(<all>)(<powerName>)|(<ePowered>)|(<ePowered>)(<all>)(<powerName>))(to)(the)(base)((<digit2>)|(10));
<numbersPowered>=(<number>)(<powerName>) | (<number>)(power)(<digit3>);
<ePowered>=(<Expon>)(<powerName>) | (<Expon>)(power)(<digit3>);
<variablesPowered>=(<variables>)(<powerName>)|(<variables>)(power)(<digit3>);
<constantsPowered>=(<constants>)(<powerName>)|(<constants>)(power)(<digit3>);
<beginners>=<constants>|<variables>|<number>;
<teen> = 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19;
<tens> = 2tens | 3tens | 4tens | 5tens | 6tens | 7tens | 8tens | 9tens ;
<digit> = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 ;
<digit2> = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 ;
<digit3>= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 ;
<thousands> = thousand;
<hundreds> = hundred;
<and> = and;
<all>= all;
<variables>=  x | y | r;
<constants>=<Expon>|<pi>;
<pi>= pi | ((3)(point)(1)(4));
<Expon>= exp;
<powerName>=squared|cubed;
<number1> = (<digit> <digit> <digit> <digit>) | (<digit> <digit> <digit>) |(<digit> <digit>) |(<digit>);
<number2> = (<digit2> <thousands> <digit2> <hundreds> <and> <tens> <digit2>) |
 		    (<digit2> <thousands> <digit2> <hundreds> <and> <teen>) |
 		    (<digit2> <thousands> <digit2> <hundreds> <and> <digit2>) |
 		    (<digit2> <thousands> <and> <tens> <digit2>) |
 		    (<digit2> <hundreds> <and> <tens> <digit2>) |
 			(<digit2> <thousands> <digit2> <hundreds>) |
 			(<digit2> <thousands> <and> <teen>) |
 			(<digit2> <hundreds> <and> <tens>) |
 			(<digit2> <thousands> <and> <digit2>) |
 			(<digit2> <hundreds> <and> <digit2>) |
 			(<digit2> <thousands>) |
 			(<digit2> <hundreds>) |
 			(<tens> <digit2>) |
 			(<teen>)|
 			(<tens>);
 
 
 